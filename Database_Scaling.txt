Databases are the most important component of any system out there.

These techniques are applicable to most databases out there. -> relational + non-relational
Scaling Database ----> 1. Horizontal Scaling, 2. Vertical Scaling

Vertical Scaling ---> add more CPU, RAM, DISK to the database                      
                 ---> requires downtime during reboot
                 ---> gives you ability to handle "Scale", more load
                 ---> vertical scaling has a physical hardware limitation

Horizontal Scaling: Read Replicas ---> always no. of read requests are higher than write
                                  ---> you move reads to other database so tha "master" is free to do writes
                                  ---> "Master" Db handles all the write requests, and "Slaves" are there for read requests
                                  ---> Your API server should know which Db to connect to get things done. --->  for this you will setup different connection of Dbs objects to perform specific task: read/write: slave/master
                                    ---> Ways: 1. Connection Pooling, 2. Load Balancing, 3. Read/Write Splitting


                                     Connection Pooling -> Use a connection Pool to manage database connection efficiently. This helps avoid the overhead of creating new connections for each request
                                     Load Balancing -> Implement a load balancing mechanism to distribute read requests across the available slave nodes.
                                     Read-Write Splitting -> Configure your application to direct your read operations to a read replica and write operations to the master node.

Replication --> Changes on one database needs to be sent to Replica to maintain Consistency.
            --> Two Modes of Replication -> 1. Synchronous Replication
                                         -> 2. Asynchronous Replication

            --> Synchronous Replication -> The primary Server(master) writes data to its local storage, then sends the changes to all the replicas and wait for the acknowledgement from all the replicas then sends
                                        -> acknowledgement of the write operation to the user.
                                        -> Features -> Strong Consistency, Slower writes (Due to wait), high data integrity, lower throughput, zero replication lag

            --> Asynchronous Replication -> The primary Server (Master) writes data to its local storage and sends acknowledgement to the user immediately without waiting to write on replicas, changes are made to 
                                         -> replicas after some time.
                                         -> Features -> Fatser writes, higher throughput, data loss risk, some replicatiob lag

Sharding ---> Because one node cannot handle the data/load we split it into multiple exclusive subsets writes on a particular row/document will go to one particular shard.
         ---> This way we scale our overall database load.
         ---> "Shards are independent no replication btw them" 
         ---> API server needs to know whom to connect to get things done. (Connection Object)
         ---> Each shard has its own replica (if needed)

